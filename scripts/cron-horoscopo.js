#!/usr/bin/env node

require('dotenv').config();
const { gerarTodosHoroscopos, verificarStatus } = require('./gerar-horoscopos-semanais');
const fs = require('fs');
const path = require('path');

// Configura√ß√£o de logs
const logDir = path.join(__dirname, 'logs');
const logFile = path.join(logDir, `horoscopo-${new Date().toISOString().split('T')[0]}.log`);

// Criar diret√≥rio de logs se n√£o existir
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir, { recursive: true });
}

// Fun√ß√£o para escrever log
function writeLog(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  
  console.log(message);
  fs.appendFileSync(logFile, logMessage);
}

// Fun√ß√£o principal do cron
async function executarCron() {
  try {
    writeLog('üöÄ Iniciando execu√ß√£o do cron job de hor√≥scopos...');
    writeLog(`üìÖ Data/Hora: ${new Date().toLocaleString('pt-BR')}`);
    writeLog(`üìÅ Log file: ${logFile}`);
    
    // Verificar se as vari√°veis de ambiente est√£o configuradas
    const requiredEnvVars = [
      'FIREBASE_API_KEY',
      'FIREBASE_PROJECT_ID', 
      'OPENAI_API_KEY'
    ];
    
    for (const envVar of requiredEnvVars) {
      if (!process.env[envVar] || process.env[envVar].includes('your_')) {
        throw new Error(`‚ùå Vari√°vel de ambiente ${envVar} n√£o configurada corretamente`);
      }
    }
    
    writeLog('‚úÖ Vari√°veis de ambiente verificadas');
    
    // Verificar status atual
    writeLog('üîç Verificando status atual...');
    await verificarStatus();
    
    // Gerar hor√≥scopos
    writeLog('üîÆ Iniciando gera√ß√£o de hor√≥scopos...');
    await gerarTodosHoroscopos();
    
    writeLog('‚úÖ Cron job executado com sucesso!');
    
  } catch (error) {
    writeLog(`‚ùå Erro na execu√ß√£o do cron job: ${error.message}`);
    writeLog(`üìã Stack trace: ${error.stack}`);
    
    // Enviar notifica√ß√£o de erro (opcional)
    // Aqui voc√™ pode adicionar notifica√ß√£o por email, Slack, etc.
    
    process.exit(1);
  }
}

// Fun√ß√£o para limpar logs antigos
function limparLogsAntigos() {
  try {
    const logs = fs.readdirSync(logDir);
    const hoje = new Date();
    
    logs.forEach(log => {
      const logPath = path.join(logDir, log);
      const stats = fs.statSync(logPath);
      const diasAntigo = (hoje - stats.mtime) / (1000 * 60 * 60 * 24);
      
      // Remover logs com mais de 30 dias
      if (diasAntigo > 30) {
        fs.unlinkSync(logPath);
        console.log(`üóëÔ∏è Log removido: ${log}`);
      }
    });
  } catch (error) {
    console.error('‚ùå Erro ao limpar logs:', error);
  }
}

// Executar baseado no comando
if (require.main === module) {
  const comando = process.argv[2];
  
  switch (comando) {
    case 'executar':
      executarCron();
      break;
    case 'status':
      verificarStatus();
      break;
    case 'limpar-logs':
      limparLogsAntigos();
      break;
    case 'teste':
      writeLog('üß™ Teste do cron job');
      writeLog('‚úÖ Teste conclu√≠do com sucesso');
      break;
    default:
      console.log('üìã Comandos dispon√≠veis:');
      console.log('  node cron-horoscopo.js executar    - Executar cron job');
      console.log('  node cron-horoscopo.js status      - Verificar status');
      console.log('  node cron-horoscopo.js limpar-logs  - Limpar logs antigos');
      console.log('  node cron-horoscopo.js teste        - Teste do cron job');
      console.log('');
      console.log('üìÖ Para configurar cron job semanal:');
      console.log('  0 6 * * 1 cd /path/to/scripts && node cron-horoscopo.js executar');
  }
}

module.exports = { executarCron, limparLogsAntigos }; 