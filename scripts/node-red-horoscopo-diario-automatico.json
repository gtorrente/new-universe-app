[
  {
    "id": "cron-diario",
    "type": "inject",
    "z": "horoscopo-automatico",
    "name": "CRON Di√°rio 06:00",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "00 06 * * *",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"inicio\": true}",
    "payloadType": "json",
    "x": 150,
    "y": 100,
    "wires": [["gerar-lista-signos"]]
  },
  {
    "id": "gerar-lista-signos",
    "type": "function",
    "z": "horoscopo-automatico",
    "name": "Gerar Lista Signos",
    "func": "// üöÄ GERA√á√ÉO AUTOM√ÅTICA DE HOR√ìSCOPOS DI√ÅRIOS\n// Executado √†s 06:00 todos os dias\n\nconsole.log('üîÆ INICIANDO GERA√á√ÉO AUTOM√ÅTICA DE HOR√ìSCOPOS DI√ÅRIOS...');\nconsole.log('üìÖ Data:', new Date().toLocaleDateString('pt-BR', { \n  weekday: 'long', \n  year: 'numeric', \n  month: 'long', \n  day: 'numeric' \n}));\n\n// Lista completa dos 12 signos\nconst signos = [\n  { en: 'aries', pt: '√Åries' },\n  { en: 'taurus', pt: 'Touro' },\n  { en: 'gemini', pt: 'G√™meos' },\n  { en: 'cancer', pt: 'C√¢ncer' },\n  { en: 'leo', pt: 'Le√£o' },\n  { en: 'virgo', pt: 'Virgem' },\n  { en: 'libra', pt: 'Libra' },\n  { en: 'scorpio', pt: 'Escorpi√£o' },\n  { en: 'sagittarius', pt: 'Sagit√°rio' },\n  { en: 'capricorn', pt: 'Capric√≥rnio' },\n  { en: 'aquarius', pt: 'Aqu√°rio' },\n  { en: 'pisces', pt: 'Peixes' }\n];\n\n// Fun√ß√£o para gerar chave do dia (YYYY-MM-DD)\nfunction getDayKey(date = new Date()) {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n// Fun√ß√£o para nome do dia da semana\nfunction getDayName(date = new Date()) {\n  const diasSemana = ['domingo', 'segunda-feira', 'ter√ßa-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 's√°bado'];\n  return diasSemana[date.getDay()];\n}\n\nconst hoje = new Date();\nconst dataChave = getDayKey(hoje);\nconst diaSemana = getDayName(hoje);\n\nconsole.log(`üìÖ Chave do dia: ${dataChave}`);\nconsole.log(`üìÖ Dia da semana: ${diaSemana}`);\n\n// Criar mensagens para cada signo\nconst mensagens = signos.map((signo, index) => {\n  return {\n    payload: {\n      signo: signo.en,\n      signo_nome: signo.pt,\n      data: dataChave,\n      dia_semana: diaSemana,\n      index: index + 1,\n      total: signos.length\n    },\n    topic: signo.en\n  };\n});\n\nconsole.log(`‚úÖ Lista gerada: ${signos.length} signos para processamento`);\nconsole.log('üîÑ Enviando para processamento individual...');\n\n// Retornar array de mensagens para o Split node\nreturn [mensagens];",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 100,
    "wires": [["split-signos"]]
  },
  {
    "id": "split-signos",
    "type": "split",
    "z": "horoscopo-automatico", 
    "name": "Split Signos",
    "splt": "\\n",
    "spltType": "str",
    "arraySplt": 1,
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 550,
    "y": 100,
    "wires": [["gerar-prompt-openai"]]
  },
  {
    "id": "gerar-prompt-openai",
    "type": "function",
    "z": "horoscopo-automatico",
    "name": "Gerar Prompt OpenAI",
    "func": "// ü§ñ PREPARAR CHAMADA PARA OPENAI\n// Gerar prompt espec√≠fico para cada signo\n\nconst { signo, signo_nome, data, dia_semana, index, total } = msg.payload;\n\nconsole.log(`üîÆ [${index}/${total}] Gerando hor√≥scopo para ${signo_nome} (${dia_semana})...`);\n\n// Prompt otimizado baseado no script original\nconst prompt = `Voc√™ √© um astrologo que vai fazer a previs√£o do dia de hoje (${dia_semana}) para o signo ${signo_nome}, e usar o mesmo tom de voz da apresentadora Catia Fonseca, vai finalizar a frase com um emoji e usar at√© 220 caracteres.\n\nREQUISITOS:\n- Tom de voz da Catia Fonseca (carism√°tica, calorosa, pr√≥xima)\n- Linguagem acess√≠vel e motivacional\n- Foco no dia de hoje (${dia_semana})\n- M√°ximo 220 caracteres\n- Finalizar com emoji\n- Sem previs√µes negativas\n\nEXEMPLO DE TOM:\n\"Oi, ${signo_nome}! Hoje √© um dia especial para voc√™. As energias est√£o alinhadas e voc√™ vai se surpreender com as oportunidades que aparecem no seu caminho. Confie na sua intui√ß√£o! ‚ú®\"\n\nIMPORTANTE: Retorne APENAS o texto da previs√£o, sem aspas ou formata√ß√£o adicional.`;\n\n// Preparar payload para OpenAI\nmsg.payload = {\n  model: \"gpt-3.5-turbo\",\n  messages: [\n    {\n      role: \"system\",\n      content: \"Voc√™ √© a apresentadora Catia Fonseca, especialista em astrologia. Use um tom carism√°tico, caloroso e pr√≥ximo. Sempre seja positiva e motivacional.\"\n    },\n    {\n      role: \"user\",\n      content: prompt\n    }\n  ],\n  temperature: 0.8,\n  max_tokens: 150\n};\n\n// Manter dados do signo para pr√≥ximas etapas\nmsg.signo_dados = {\n  signo: signo,\n  signo_nome: signo_nome,\n  data: data,\n  dia_semana: dia_semana,\n  index: index,\n  total: total\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 100,
    "wires": [["chamar-openai"]]
  },
  {
    "id": "chamar-openai",
    "type": "http request",
    "z": "horoscopo-automatico",
    "name": "Chamar OpenAI",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "https://api.openai.com/v1/chat/completions",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "bearer",
    "senderr": false,
    "headers": [
      {
        "keyType": "Content-Type",
        "keyValue": "",
        "valueType": "application/json",
        "valueValue": ""
      }
    ],
    "credentials": {
      "token": "YOUR_OPENAI_API_KEY_HERE"
    },
    "x": 1000,
    "y": 100,
    "wires": [["processar-resposta-openai"]]
  },
  {
    "id": "processar-resposta-openai",
    "type": "function",
    "z": "horoscopo-automatico",
    "name": "Processar Resposta OpenAI",
    "func": "// üìù PROCESSAR RESPOSTA DA OPENAI\n// Extrair e formatar o hor√≥scopo gerado\n\nconst { signo, signo_nome, data, dia_semana, index, total } = msg.signo_dados;\n\nconsole.log(`üìù [${index}/${total}] Processando resposta para ${signo_nome}...`);\n\n// Verificar se houve erro na API\nif (msg.statusCode !== 200) {\n  console.error(`‚ùå [${index}/${total}] Erro na OpenAI para ${signo_nome}:`, msg.statusCode);\n  console.error('Resposta:', msg.payload);\n  \n  // Usar hor√≥scopo de fallback\n  var horoscopoTexto = `Hoje √© um dia de renova√ß√£o para ${signo_nome}! As energias c√≥smicas trazem novas oportunidades. Mantenha-se aberto ao que vier! ‚ú®`;\n} else {\n  // Extrair texto da resposta\n  try {\n    var horoscopoTexto = msg.payload.choices[0].message.content.trim();\n    \n    // Verificar se tem emoji no final\n    if (!/\\p{Emoji}/u.test(horoscopoTexto)) {\n      console.warn(`‚ö†Ô∏è [${index}/${total}] Hor√≥scopo para ${signo_nome} n√£o tem emoji, adicionando...`);\n      horoscopoTexto += ' ‚ú®';\n    }\n    \n    // Limitar caracteres\n    if (horoscopoTexto.length > 220) {\n      console.warn(`‚ö†Ô∏è [${index}/${total}] Hor√≥scopo para ${signo_nome} muito longo, cortando...`);\n      horoscopoTexto = horoscopoTexto.substring(0, 217) + '...';\n    }\n    \n    console.log(`‚úÖ [${index}/${total}] Hor√≥scopo gerado para ${signo_nome}: ${horoscopoTexto.length} caracteres`);\n    \n  } catch (error) {\n    console.error(`‚ùå [${index}/${total}] Erro ao processar resposta para ${signo_nome}:`, error);\n    // Usar fallback\n    var horoscopoTexto = `Hoje √© um dia especial para ${signo_nome}! As estrelas indicam momentos de alegria e realiza√ß√µes. Aproveite! ‚ú®`;\n  }\n}\n\n// Preparar documento para Firestore\nconst documentoFirestore = {\n  fields: {\n    mensagem: {\n      stringValue: horoscopoTexto\n    },\n    signo: {\n      stringValue: signo\n    },\n    nome_signo: {\n      stringValue: signo_nome\n    },\n    dia_semana: {\n      stringValue: dia_semana\n    },\n    data: {\n      stringValue: data\n    },\n    fonte: {\n      stringValue: \"catia-fonseca\"\n    },\n    gerado_em: {\n      timestampValue: new Date().toISOString()\n    },\n    versao: {\n      stringValue: \"node-red-v1\"\n    }\n  }\n};\n\n// URL do Firestore para salvar\nconst urlFirestore = `https://firestore.googleapis.com/v1/projects/tarot-universo-catia/databases/(default)/documents/horoscopos_diarios/${data}/signos/${signo}`;\n\nconsole.log(`üíæ [${index}/${total}] Salvando ${signo_nome} no Firebase...`);\n\n// Preparar mensagem para salvar no Firestore\nmsg.url = urlFirestore;\nmsg.method = 'PATCH';\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\nmsg.payload = documentoFirestore;\n\n// Manter dados para o join final\nmsg.signo_resultado = {\n  signo: signo,\n  signo_nome: signo_nome,\n  data: data,\n  horoscopo: horoscopoTexto,\n  index: index,\n  total: total\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1250,
    "y": 100,
    "wires": [["salvar-firestore"]]
  },
  {
    "id": "salvar-firestore",
    "type": "http request",
    "z": "horoscopo-automatico",
    "name": "Salvar Firestore",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 1470,
    "y": 100,
    "wires": [["processar-resultado"]]
  },
  {
    "id": "processar-resultado",
    "type": "function",
    "z": "horoscopo-automatico",
    "name": "Processar Resultado",
    "func": "// üìä PROCESSAR RESULTADO DO SALVAMENTO\n// Verificar se houve sucesso e preparar para join\n\nconst { signo, signo_nome, data, horoscopo, index, total } = msg.signo_resultado;\n\n// Verificar se salvou com sucesso\nif (msg.statusCode === 200) {\n  console.log(`‚úÖ [${index}/${total}] ${signo_nome} salvo com sucesso no Firebase!`);\n  msg.sucesso = true;\n} else {\n  console.error(`‚ùå [${index}/${total}] Erro ao salvar ${signo_nome}:`, msg.statusCode, msg.payload);\n  msg.sucesso = false;\n}\n\n// Preparar dados para o join\nmsg.payload = {\n  signo: signo,\n  signo_nome: signo_nome,\n  data: data,\n  horoscopo: horoscopo,\n  index: index,\n  total: total,\n  sucesso: msg.sucesso,\n  timestamp: new Date().toISOString()\n};\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1690,
    "y": 100,
    "wires": [["join-resultados"]]
  },
  {
    "id": "join-resultados",
    "type": "join",
    "z": "horoscopo-automatico",
    "name": "Join Resultados",
    "mode": "custom",
    "build": "array",
    "property": "payload",
    "propertyType": "msg",
    "key": "topic",
    "joiner": "\\n",
    "joinerType": "str",
    "accumulate": false,
    "timeout": "",
    "count": "12",
    "reduceRight": false,
    "reduceExp": "",
    "reduceInit": "",
    "reduceInitType": "",
    "reduceFixup": "",
    "x": 1910,
    "y": 100,
    "wires": [["log-final-automatico"]]
  },
  {
    "id": "log-final-automatico",
    "type": "function",
    "z": "horoscopo-automatico",
    "name": "Log Final Autom√°tico",
    "func": "// üéâ LOG FINAL DA GERA√á√ÉO AUTOM√ÅTICA\n// Consolidar resultados e estat√≠sticas\n\nconst resultados = msg.payload;\nconst dataInicio = new Date();\n\nconsole.log('\\n'.repeat(3));\nconsole.log('üéâ ='.repeat(50));\nconsole.log('üéâ GERA√á√ÉO AUTOM√ÅTICA DE HOR√ìSCOPOS DI√ÅRIOS CONCLU√çDA!');\nconsole.log('üéâ ='.repeat(50));\n\nconst sucessos = resultados.filter(r => r.sucesso);\nconst falhas = resultados.filter(r => !r.sucesso);\n\nconsole.log(`üìä ESTAT√çSTICAS:`);\nconsole.log(`   üìÖ Data: ${resultados[0]?.data || 'N/A'}`);\nconsole.log(`   ‚úÖ Sucessos: ${sucessos.length}/12`);\nconsole.log(`   ‚ùå Falhas: ${falhas.length}/12`);\nconsole.log(`   üìà Taxa de sucesso: ${((sucessos.length/12) * 100).toFixed(1)}%`);\n\nif (sucessos.length > 0) {\n  console.log(`\\n‚úÖ SIGNOS GERADOS COM SUCESSO:`);\n  sucessos.forEach(r => {\n    console.log(`   üîÆ ${r.signo_nome}: \"${r.horoscopo.substring(0, 50)}...\"`);\n  });\n}\n\nif (falhas.length > 0) {\n  console.log(`\\n‚ùå SIGNOS COM FALHA:`);\n  falhas.forEach(r => {\n    console.log(`   ‚ö†Ô∏è ${r.signo_nome} (${r.signo})`);\n  });\n}\n\n// Salvar status da gera√ß√£o no Firestore\nconst statusDoc = {\n  fields: {\n    data: {\n      stringValue: resultados[0]?.data || new Date().toISOString().split('T')[0]\n    },\n    total_signos: {\n      integerValue: \"12\"\n    },\n    sucessos: {\n      integerValue: sucessos.length.toString()\n    },\n    falhas: {\n      integerValue: falhas.length.toString()\n    },\n    taxa_sucesso: {\n      doubleValue: (sucessos.length/12) * 100\n    },\n    gerado_em: {\n      timestampValue: new Date().toISOString()\n    },\n    metodo: {\n      stringValue: \"node-red-automatico\"\n    },\n    signos_sucesso: {\n      arrayValue: {\n        values: sucessos.map(r => ({ stringValue: r.signo }))\n      }\n    },\n    signos_falha: {\n      arrayValue: {\n        values: falhas.map(r => ({ stringValue: r.signo }))\n      }\n    }\n  }\n};\n\nconst dataChave = resultados[0]?.data || new Date().toISOString().split('T')[0];\nconst urlStatus = `https://firestore.googleapis.com/v1/projects/tarot-universo-catia/databases/(default)/documents/horoscopos_diarios/${dataChave}/config/status`;\n\nconsole.log(`\\nüíæ Salvando status da gera√ß√£o...`);\n\nmsg.url = urlStatus;\nmsg.method = 'PATCH';\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\nmsg.payload = statusDoc;\n\nconsole.log('='.repeat(50));\nconsole.log(`üöÄ PR√ìXIMA EXECU√á√ÉO: Amanh√£ √†s 06:00`);\nconsole.log('='.repeat(50));\nconsole.log('\\n'.repeat(2));\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2150,
    "y": 100,
    "wires": [["salvar-status-final"]]
  },
  {
    "id": "salvar-status-final",
    "type": "http request",
    "z": "horoscopo-automatico",
    "name": "Salvar Status Final",
    "method": "use",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "headers": [],
    "x": 2380,
    "y": 100,
    "wires": [[]]
  },
  {
    "id": "teste-manual",
    "type": "inject",
    "z": "horoscopo-automatico",
    "name": "üß™ Teste Manual",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\"teste\": true}",
    "payloadType": "json",
    "x": 150,
    "y": 200,
    "wires": [["gerar-lista-signos"]]
  }
]