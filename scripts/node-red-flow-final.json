[
  {
    "id": "horoscopo-dario",
    "type": "http in",
    "z": "horoscopo-flow",
    "name": "Horoscopo Dario",
    "url": "/horoscopo",
    "method": "GET",
    "upload": false,
    "swaggerDoc": "",
    "x": 120,
    "y": 100,
    "wires": [["processar-requisicao"]]
  },
  {
    "id": "horoscopo-semanal",
    "type": "http in",
    "z": "horoscopo-flow",
    "name": "Horoscopo Semanal",
    "url": "/horoscopo-semanal",
    "method": "GET",
    "upload": false,
    "swaggerDoc": "",
    "x": 120,
    "y": 200,
    "wires": [["processar-requisicao"]]
  },
  {
    "id": "processar-requisicao",
    "type": "function",
    "z": "horoscopo-flow",
    "name": "Processar Requisicao",
    "func": "// CÓDIGO FINAL - SEM VARIÁVEIS NA URL\nconsole.log('🚀 INICIANDO PROCESSAMENTO FINAL...');\n\n// Função para obter chave da semana atual\nfunction getWeekKey() {\n  const now = new Date();\n  const startOfWeek = new Date(now.setDate(now.getDate() - now.getDay()));\n  const year = startOfWeek.getFullYear();\n  const weekNumber = Math.ceil((startOfWeek.getDate() + startOfWeek.getDay()) / 7);\n  return `${year}-W${weekNumber.toString().padStart(2, '0')}`;\n}\n\n// Extrair signo da requisição\nconst { sign } = msg.payload;\n\nconsole.log('📥 Payload recebido:', msg.payload);\nconsole.log('📥 Signo extraído:', sign);\n\nif (!sign) {\n  console.error('❌ Signo não especificado');\n  msg.payload = {\n    success: false,\n    error: \"Signo não especificado\",\n    message: \"Parâmetro 'sign' é obrigatório\"\n  };\n  return msg;\n}\n\n// Gerar URL completa\nconst semana = getWeekKey();\nconst urlCompleta = `https://firestore.googleapis.com/v1/projects/tarot-universo-catia/databases/(default)/documents/horoscopos_semanais/${semana}/signos/${sign}`;\n\nconsole.log('🔍 DEBUG: URL completa gerada:');\nconsole.log('  ', urlCompleta);\n\n// IMPORTANTE: Definir msg.url com a URL completa\nmsg.url = urlCompleta;\nmsg.method = 'GET';\nmsg.headers = {\n  'Content-Type': 'application/json'\n};\n\n// Armazenar informações adicionais\nmsg.isSemanal = msg.req?.url?.includes('horoscopo-semanal');\nmsg.signo = sign;\nmsg.semana = semana;\n\nconsole.log('✅ DEBUG: Configuração concluída');\nconsole.log('  - msg.url:', msg.url);\nconsole.log('  - msg.method:', msg.method);\nconsole.log('  - msg.headers:', msg.headers);\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 150,
    "wires": [["http-request"]]
  },
  {
    "id": "http-request",
    "type": "http request",
    "z": "horoscopo-flow",
    "name": "http request",
    "method": "GET",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "senderr": false,
    "x": 520,
    "y": 150,
    "wires": [["debug-resposta", "processar-resposta", "processar-resposta-semanal"]]
  },
  {
    "id": "debug-resposta",
    "type": "function",
    "z": "horoscopo-flow",
    "name": "Debug Resposta",
    "func": "// CÓDIGO DE DEBUG - VERIFICAR RESPOSTA DO HTTP REQUEST\nconsole.log('🔍 DEBUG: VERIFICANDO RESPOSTA DO HTTP REQUEST...');\n\n// Verificar se há payload\nif (!msg.payload) {\n  console.error('❌ DEBUG: msg.payload está vazio');\n  msg.payload = {\n    success: false,\n    error: \"Payload vazio\",\n    message: \"Nenhum dado recebido\"\n  };\n  return msg;\n}\n\n// Verificar tipo de payload\nconsole.log('📋 DEBUG: Tipo do payload:', typeof msg.payload);\nconsole.log('📋 DEBUG: Payload é string?', typeof msg.payload === 'string');\nconsole.log('📋 DEBUG: Payload é objeto?', typeof msg.payload === 'object');\n\n// Se for string, tentar fazer parse\nif (typeof msg.payload === 'string') {\n  try {\n    console.log('🔄 DEBUG: Tentando fazer parse da string...');\n    const parsed = JSON.parse(msg.payload);\n    console.log('✅ DEBUG: Parse bem-sucedido:', parsed);\n    msg.payload = parsed;\n  } catch (error) {\n    console.error('❌ DEBUG: Erro no parse:', error);\n    console.log('📄 DEBUG: Conteúdo da string:', msg.payload.substring(0, 200));\n  }\n}\n\n// Verificar estrutura do payload\nif (typeof msg.payload === 'object') {\n  console.log('📊 DEBUG: Chaves do objeto:', Object.keys(msg.payload));\n  \n  if (msg.payload.fields) {\n    console.log('✅ DEBUG: Campo \"fields\" encontrado');\n    console.log('📋 DEBUG: Chaves do fields:', Object.keys(msg.payload.fields));\n  } else {\n    console.log('❌ DEBUG: Campo \"fields\" NÃO encontrado');\n  }\n  \n  if (msg.payload.error) {\n    console.log('❌ DEBUG: Erro encontrado:', msg.payload.error);\n  }\n}\n\n// Verificar status code\nif (msg.statusCode) {\n  console.log('📊 DEBUG: Status Code:', msg.statusCode);\n}\n\n// Verificar headers\nif (msg.headers) {\n  console.log('📋 DEBUG: Headers recebidos:', Object.keys(msg.headers));\n}\n\n// Continuar com o fluxo normal\nconsole.log('✅ DEBUG: Continuando fluxo...');\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 720,
    "y": 100,
    "wires": [["processar-resposta"]]
  },
  {
    "id": "processar-resposta",
    "type": "function",
    "z": "horoscopo-flow",
    "name": "Processar Resposta",
    "func": "// CÓDIGO PARA PROCESSAR RESPOSTA DO FIREBASE\nconsole.log('🔄 PROCESSANDO RESPOSTA DO FIREBASE...');\n\n// Verificar se há resposta do HTTP Request\nif (!msg.payload) {\n  console.error('❌ Nenhuma resposta recebida');\n  msg.payload = {\n    success: false,\n    error: \"Nenhuma resposta do Firebase\",\n    message: \"Dados não encontrados\"\n  };\n  return msg;\n}\n\nconsole.log('📥 Resposta recebida:', typeof msg.payload);\n\n// Verificar se é uma resposta de erro\nif (msg.payload.error || msg.payload.success === false) {\n  console.error('❌ Erro na resposta:', msg.payload);\n  return msg;\n}\n\n// Verificar se é uma resposta do Firebase\nif (msg.payload.fields) {\n  console.log('✅ Resposta do Firebase detectada');\n  \n  try {\n    // Processar dados do Firebase\n    const dados = msg.payload.fields;\n    \n    // Extrair dados do destaque\n    const destaque = dados.destaque?.mapValue?.fields || {};\n    const destaqueProcessado = {\n      titulo: destaque.titulo?.stringValue || \"Horóscopo Diário\",\n      mensagem: destaque.mensagem?.stringValue || \"Mensagem do dia\",\n      tema: destaque.tema?.stringValue || \"Geral\",\n      cor: destaque.cor?.stringValue || \"#8B5CF6\"\n    };\n    \n    // Extrair dados do dia específico (segunda-feira como exemplo)\n    const segunda = dados.segunda?.mapValue?.fields || {};\n    const diaProcessado = {\n      tema: segunda.tema?.stringValue || \"Geral\",\n      trecho: segunda.trecho?.stringValue || \"Mensagem do dia\",\n      cor: segunda.cor?.stringValue || \"#8B5CF6\",\n      icone: segunda.icone?.stringValue || \"FaStar\"\n    };\n    \n    // Montar resposta final\n    const resposta = {\n      success: true,\n      data: {\n        destaque: destaqueProcessado,\n        dia: diaProcessado,\n        signo: msg.signo || \"aries\",\n        semana: msg.semana || \"2025-W04\"\n      }\n    };\n    \n    console.log('✅ Dados processados com sucesso:', resposta);\n    msg.payload = resposta;\n    \n  } catch (error) {\n    console.error('❌ Erro ao processar dados:', error);\n    msg.payload = {\n      success: false,\n      error: \"Erro ao processar dados do Firebase\",\n      message: error.message\n    };\n  }\n  \n} else {\n  console.error('❌ Formato de resposta inválido:', msg.payload);\n  msg.payload = {\n    success: false,\n    error: \"Formato de resposta inválido\",\n    message: \"Dados não estão no formato esperado\"\n  };\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 100,
    "wires": [["resposta-horoscopo"]]
  },
  {
    "id": "processar-resposta-semanal",
    "type": "function",
    "z": "horoscopo-flow",
    "name": "Processar Resposta Semanal",
    "func": "// CÓDIGO PARA PROCESSAR RESPOSTA SEMANAL DO FIREBASE\nconsole.log('🔄 PROCESSANDO RESPOSTA SEMANAL DO FIREBASE...');\n\n// Verificar se há resposta do HTTP Request\nif (!msg.payload) {\n  console.error('❌ Nenhuma resposta recebida');\n  msg.payload = {\n    success: false,\n    error: \"Nenhuma resposta do Firebase\",\n    message: \"Dados não encontrados\"\n  };\n  return msg;\n}\n\nconsole.log('📥 Resposta recebida:', typeof msg.payload);\n\n// Verificar se é uma resposta de erro\nif (msg.payload.error || msg.payload.success === false) {\n  console.error('❌ Erro na resposta:', msg.payload);\n  return msg;\n}\n\n// Verificar se é uma resposta do Firebase\nif (msg.payload.fields) {\n  console.log('✅ Resposta do Firebase detectada');\n  \n  try {\n    // Processar dados do Firebase\n    const dados = msg.payload.fields;\n    \n    // Extrair dados do destaque\n    const destaque = dados.destaque?.mapValue?.fields || {};\n    const destaqueProcessado = {\n      titulo: destaque.titulo?.stringValue || \"Horóscopo Semanal\",\n      mensagem: destaque.mensagem?.stringValue || \"Mensagem da semana\",\n      tema: destaque.tema?.stringValue || \"Geral\",\n      cor: destaque.cor?.stringValue || \"#8B5CF6\"\n    };\n    \n    // Extrair dados de todos os dias da semana\n    const diasSemana = ['segunda', 'terca', 'quarta', 'quinta', 'sexta', 'sabado', 'domingo'];\n    const semanaProcessada = {};\n    \n    diasSemana.forEach(dia => {\n      const diaData = dados[dia]?.mapValue?.fields || {};\n      semanaProcessada[dia] = {\n        tema: diaData.tema?.stringValue || \"Geral\",\n        trecho: diaData.trecho?.stringValue || \"Mensagem do dia\",\n        cor: diaData.cor?.stringValue || \"#8B5CF6\",\n        icone: diaData.icone?.stringValue || \"FaStar\"\n      };\n    });\n    \n    // Montar resposta final\n    const resposta = {\n      success: true,\n      data: {\n        destaque: destaqueProcessado,\n        semana: semanaProcessada,\n        signo: msg.signo || \"aries\",\n        semanaKey: msg.semana || \"2025-W04\"\n      }\n    };\n    \n    console.log('✅ Dados semanais processados com sucesso:', resposta);\n    msg.payload = resposta;\n    \n  } catch (error) {\n    console.error('❌ Erro ao processar dados semanais:', error);\n    msg.payload = {\n      success: false,\n      error: \"Erro ao processar dados do Firebase\",\n      message: error.message\n    };\n  }\n  \n} else {\n  console.error('❌ Formato de resposta inválido:', msg.payload);\n  msg.payload = {\n    success: false,\n    error: \"Formato de resposta inválido\",\n    message: \"Dados não estão no formato esperado\"\n  };\n}\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 920,
    "y": 200,
    "wires": [["resposta-horoscopo-semanal"]]
  },
  {
    "id": "resposta-horoscopo",
    "type": "http response",
    "z": "horoscopo-flow",
    "name": "Resposta Horóscopo",
    "statusCode": "200",
    "headers": {},
    "x": 1120,
    "y": 100,
    "wires": []
  },
  {
    "id": "resposta-horoscopo-semanal",
    "type": "http response",
    "z": "horoscopo-flow",
    "name": "Resposta Horoscopo Semanal",
    "statusCode": "200",
    "headers": {},
    "x": 1120,
    "y": 200,
    "wires": []
  }
] 