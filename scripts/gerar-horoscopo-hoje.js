require('dotenv').config();
const { initializeApp } = require('firebase/app');
const { getFirestore, doc, setDoc } = require('firebase/firestore');
const OpenAI = require('openai');

// Configura√ß√£o do Firebase
const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID
};

// Inicializar OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Inicializar Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Lista de signos
const signos = {
  aries: "√Åries",
  taurus: "Touro", 
  gemini: "G√™meos",
  cancer: "C√¢ncer",
  leo: "Le√£o",
  virgo: "Virgem",
  libra: "Libra",
  scorpio: "Escorpi√£o",
  sagittarius: "Sagit√°rio",
  capricorn: "Capric√≥rnio",
  aquarius: "Aqu√°rio",
  pisces: "Peixes"
};

// Fun√ß√£o para obter chave do dia atual
function getDayKey(date = new Date()) {
  // For√ßar fuso hor√°rio brasileiro
  const dataBR = new Date(date.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
  const year = dataBR.getFullYear();
  const month = (dataBR.getMonth() + 1).toString().padStart(2, '0');
  const day = dataBR.getDate().toString().padStart(2, '0');
  return `${year}-${month}-${day}`;
}

// Fun√ß√£o para obter nome do dia da semana
function getDayName(date = new Date()) {
  const dias = ['domingo', 'segunda-feira', 'ter√ßa-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 's√°bado'];
  const dataBR = new Date(date.toLocaleString("en-US", {timeZone: "America/Sao_Paulo"}));
  return dias[dataBR.getDay()];
}

// Fun√ß√£o para gerar hor√≥scopo di√°rio
async function gerarHoroscopoDiario(signo, nomeSigno) {
  try {
    const hoje = new Date();
    const diaSemana = getDayName(hoje);
    
    console.log(`üîÆ Gerando hor√≥scopo di√°rio para ${nomeSigno} (${diaSemana})...`);
    
    const prompt = `Voc√™ √© um astrologo que vai fazer a previs√£o do dia de hoje (${diaSemana}) para o signo ${nomeSigno}, e usar o mesmo tom de voz da apresentadora Catia Fonseca, vai finalizar a frase com um emoji e usar at√© 400 caracteres.

REQUISITOS:
- Tom de voz da Catia Fonseca (carism√°tica, calorosa, pr√≥xima)
- Linguagem acess√≠vel e motivacional
- Foco no dia de hoje (${diaSemana})
- M√°ximo 400 caracteres
- Finalizar com emoji
- Sem previs√µes negativas

EXEMPLO DE TOM:
"Oi, ${nomeSigno}! Hoje √© um dia especial para voc√™. As energias est√£o alinhadas e voc√™ vai se surpreender com as oportunidades que aparecem no seu caminho. Confie na sua intui√ß√£o! ‚ú®"

IMPORTANTE: Retorne APENAS o texto da previs√£o, sem aspas ou formata√ß√£o adicional.`;

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        {
          role: "system",
          content: "Voc√™ √© a apresentadora Catia Fonseca, especialista em astrologia. Use um tom carism√°tico, caloroso e pr√≥ximo. Sempre seja positiva e motivacional."
        },
        {
          role: "user", 
          content: prompt
        }
      ],
      temperature: 0.8,
      max_tokens: 200
    });

    let horoscopoTexto = response.choices[0].message.content.trim();
    
    // Verificar se tem emoji
    if (!/\p{Emoji}/u.test(horoscopoTexto)) {
      console.warn(`‚ö†Ô∏è Hor√≥scopo para ${nomeSigno} n√£o tem emoji, adicionando...`);
      horoscopoTexto += ' ‚ú®';
    }

    // Truncar se necess√°rio
    if (horoscopoTexto.length > 400) {
      console.warn(`‚ö†Ô∏è Hor√≥scopo para ${nomeSigno} muito longo (${horoscopoTexto.length} chars), truncando...`);
      const truncated = horoscopoTexto.substring(0, 397);
      const lastSpace = truncated.lastIndexOf(' ');
      if (lastSpace > 350) {
        horoscopoTexto = truncated.substring(0, lastSpace) + '...';
      } else {
        horoscopoTexto = truncated + '...';
      }
    }

    console.log(`‚úÖ Hor√≥scopo gerado para ${nomeSigno} (${horoscopoTexto.length} caracteres)`);
    
    return {
      signo,
      nomeSigno,
      mensagem: horoscopoTexto,
      data: getDayKey(),
      timestamp: new Date().toISOString()
    };
    
  } catch (error) {
    console.error(`‚ùå Erro ao gerar hor√≥scopo para ${nomeSigno}:`, error);
    throw error;
  }
}

// Fun√ß√£o para salvar hor√≥scopo no Firebase
async function salvarHoroscopoDiario(horoscopo) {
  try {
    const diaKey = horoscopo.data;
    const docRef = doc(db, 'horoscopos_diarios', diaKey, 'signos', horoscopo.signo);
    
    await setDoc(docRef, {
      horoscopo: {
        mensagem: horoscopo.mensagem,
        data: horoscopo.data,
        timestamp: horoscopo.timestamp
      }
    });
    
    console.log(`üíæ Hor√≥scopo salvo para ${horoscopo.nomeSigno}`);
    
  } catch (error) {
    console.error(`‚ùå Erro ao salvar hor√≥scopo para ${horoscopo.nomeSigno}:`, error);
    throw error;
  }
}

// Fun√ß√£o principal
async function gerarHoroscoposParaHoje() {
  try {
    console.log('üöÄ Gerando hor√≥scopos para hoje...');
    console.log('üìÖ Data:', new Date().toLocaleString('pt-BR', {timeZone: 'America/Sao_Paulo'}));
    console.log('üìÖ Dia chave:', getDayKey());
    console.log('');

    // Gerar para todos os signos
    const promises = Object.entries(signos).map(async ([signo, nomeSigno]) => {
      try {
        const horoscopo = await gerarHoroscopoDiario(signo, nomeSigno);
        await salvarHoroscopoDiario(horoscopo);
        return { signo, success: true };
      } catch (error) {
        console.error(`‚ùå Falha para ${nomeSigno}:`, error.message);
        return { signo, success: false, error: error.message };
      }
    });

    const results = await Promise.all(promises);
    
    const sucessos = results.filter(r => r.success).length;
    const falhas = results.filter(r => !r.success).length;

    console.log('\nüìä RELAT√ìRIO:');
    console.log(`‚úÖ Sucessos: ${sucessos}`);
    console.log(`‚ùå Falhas: ${falhas}`);
    
    if (falhas > 0) {
      console.log('\n‚ùå Falhas detalhadas:');
      results.filter(r => !r.success).forEach(r => {
        console.log(`  - ${r.signo}: ${r.error}`);
      });
    }

    console.log('\nüéâ Gera√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro fatal:', error);
    process.exit(1);
  }
}

// Executar se for chamado diretamente
if (require.main === module) {
  gerarHoroscoposParaHoje()
    .then(() => process.exit(0))
    .catch(error => {
      console.error('‚ùå Erro:', error);
      process.exit(1);
    });
}

module.exports = { gerarHoroscoposParaHoje, getDayKey }; 